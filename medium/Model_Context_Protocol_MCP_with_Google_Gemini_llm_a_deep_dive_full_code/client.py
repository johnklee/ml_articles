#!/usr/bin/env python
"""Client to demo Gemini with MCP integration.

This script is copy from below path:
  - https://github.com/arjunprabhulal/mcp-gemini-search/blob/main/client.py
"""

# pip install google-generativeai mcp
import asyncio
import os
# Add json import for formatting output
import json
from datetime import datetime
from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

# Re-add StdioServerParameters, setting args for stdio
server_params = StdioServerParameters(
    command="mcp-flight-search",
    args=["--connection_type", "stdio"],
    env={"SERP_API_KEY": os.getenv("SERP_API_KEY")},
)

async def run():
  # Remove debug prints
  async with stdio_client(server_params) as (read, write):
    async with ClientSession(read, write) as session:
      prompt = f"Find Flights from Atlanta to Las Vegas 2026-05-05"
      await session.initialize()
      # Remove debug prints

      mcp_tools = await session.list_tools()
      # Remove debug prints
      tools = [
          types.Tool(
              function_declarations=[
                  {
                      "name": tool.name,
                      "description": tool.description,
                      "parameters": {
                          k: v
                          for k, v in tool.inputSchema.items()
                          if k not in ["additionalProperties", "$schema"]
                      },
                  }
              ]
          )
          for tool in mcp_tools.tools
      ]
      # Remove debug prints

      response = client.models.generate_content(
          model="gemini-2.5-pro",
          contents=prompt,
          config=types.GenerateContentConfig(
              temperature=0,
              tools=tools,
          ),
      )

      # Remove raw response print
      if response.candidates[0].content.parts[0].function_call:
        function_call = response.candidates[0].content.parts[0].function_call

        result = await session.call_tool(
            function_call.name, arguments=dict(function_call.args))

        # Parse and print formatted JSON result
        print("--- Formatted Result ---") # Add header for clarity
        try:
          flight_data = json.loads(result.content[0].text)
          print(json.dumps(flight_data, indent=2))
        except json.JSONDecodeError:
          print("MCP server returned non-JSON response:")
          print(result.content[0].text)
        except (IndexError, AttributeError):
          print("Unexpected result structure from MCP server:")
          print(result)
      else:
        print("No function call was generated by the model.")
        if response.text:
          print("Model response:")
          print(response.text)


if __name__ == '__main__':
  # Revert main block
  asyncio.run(run())
